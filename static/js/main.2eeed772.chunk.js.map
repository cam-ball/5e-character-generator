{"version":3,"sources":["components/Attribute.js","components/Character.js","components/Interface.js","components/QueryInterface.js","components/App.js","reportWebVitals.js","index.js"],"names":["Attribute","props","attribute","name","Character","characterRace","characterClass","Interface","sample","array","Math","floor","random","length","srdData","classes","races","useState","setCharacterClass","setCharacterRace","class","onClick","QueryInterface","SRD_QUERY","gql","data","useQuery","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAUeA,EARG,SAACC,GACjB,IAAQC,EAAcD,EAAdC,UAER,OACE,+BAAOA,EAAUC,QCONC,EAVG,SAACH,GACjB,IAAQI,EAAkCJ,EAAlCI,cAAeC,EAAmBL,EAAnBK,eAEvB,OACE,oDACqB,cAAC,EAAD,CAAWJ,UAAWG,IAD3C,IAC6D,cAAC,EAAD,CAAWH,UAAWI,IADnF,QCyBWC,EA7BG,SAACN,GACjB,IAAMO,EAAS,SAACC,GACd,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAQhD,EAA2BZ,EAAMa,QAAzBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MACjB,EAA4CC,mBAAST,EAAOO,IAA5D,mBAAOT,EAAP,KAAuBY,EAAvB,KACA,EAA0CD,mBAAST,EAAOQ,IAA1D,mBAAOX,EAAP,KAAsBc,EAAtB,KAGA,OACE,gCACE,qBAAKC,MAAM,cAAX,SACE,cAAC,EAAD,CAAWf,cAAeA,EAAeC,eAAgBA,MAE3D,qBAAKc,MAAM,cAAX,SACE,wBAAQC,QAAS,kBAfrBH,EAAkBV,EAAOO,SACzBI,EAAiBX,EAAOQ,KAcpB,SACI,mC,QCAGM,EArBQ,WACrB,IAAMC,EAAYC,cAAH,0HAWPC,EAASC,mBAASH,GAAlBE,KAER,OAAIA,EACM,cAAC,EAAD,CAAWX,QAASW,IAEpB,iDCPGE,G,MAVH,WACV,OACE,qBAAKC,UAAU,OAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,UCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMRQ,EAAWC,yBAAe,CAC9BC,IAAK,oCAGDC,EAAS,IAAIC,eAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,IAAMO,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.2eeed772.chunk.js","sourcesContent":["import React from 'react'\n\nconst Attribute = (props) => {\n  const { attribute } = props;\n\n  return (\n    <span>{attribute.name}</span>\n  )\n}\n\nexport default Attribute;\n","import React from 'react'\nimport Attribute from './Attribute'\n\nconst Character = (props) => {\n  const { characterRace, characterClass } = props;\n\n  return (\n    <p>\n      You should build a <Attribute attribute={characterRace} /> <Attribute attribute={characterClass} />!\n    </p>\n  )\n}\n\nexport default Character;\n","import React, { useState } from 'react'\nimport Character from './Character'\n\nconst Interface = (props) => {\n  const sample = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  const shuffleCharacter = () => {\n    setCharacterClass(sample(classes));\n    setCharacterRace(sample(races));\n  }\n\n  const { classes, races } = props.srdData;\n  const [characterClass, setCharacterClass] = useState(sample(classes))\n  const [characterRace, setCharacterRace] = useState(sample(races))\n\n\n  return (\n    <div>\n      <div class='flex-center'>\n        <Character characterRace={characterRace} characterClass={characterClass}/>\n      </div>\n      <div class='flex-center'>\n        <button onClick={() => shuffleCharacter() }>\n          { \"I'm not feeling this one\" }\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Interface;\n","import React from 'react'\nimport Interface from './Interface'\nimport { useQuery, gql } from '@apollo/client';\n\nconst QueryInterface = () => {\n  const SRD_QUERY = gql`\n    {\n      races {\n        name\n      }\n      classes {\n        name\n      }\n    }\n  `;\n\n  const { data } = useQuery(SRD_QUERY);\n\n  if (data) {\n    return (<Interface srdData={data}/>);\n  } else {\n    return (<p> Crunchatizing </p>);\n  }\n}\n\nexport default QueryInterface;\n","import React from 'react';\nimport QueryInterface from './QueryInterface';\nimport './../styles/App.css'\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <div className='content'>\n        <QueryInterface />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client'\n\nconst httpLink = createHttpLink({\n  uri: 'https://www.dnd5eapi.co/graphql'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}