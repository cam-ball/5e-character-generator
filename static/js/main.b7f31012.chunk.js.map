{"version":3,"sources":["components/Attribute.js","components/Character.js","components/AbilityScore.js","components/RollResult.js","components/helpers/RollHelper.js","components/Roller.js","components/CharacterRandomizer.js","components/App.js","reportWebVitals.js","index.js"],"names":["Attribute","props","attribute","name","Character","characterAlignment","characterRace","characterClass","class","AbilityScore","score","RollResult","rollResult","STANDARD_ARRAY","rollD6","Math","ceil","random","rollAbilityScores","type","manualRolls","i","rolls","sort","shift","reduce","a","b","push","rollManual","Roller","visible","useState","rollMethod","setRollMethod","setRollResult","handleUpdate","event","target","value","onChange","id","for","CharacterRandomizer","sample","array","floor","length","srdData","alignments","races","classes","setCharacterAlignment","setCharacterRace","setCharacterClass","lockedIn","setLockedIn","onClick","App","SRD_QUERY","gql","data","useQuery","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7f31012.chunk.js","sourcesContent":["import React from 'react'\n\nconst Attribute = (props) => {\n  const { attribute } = props;\n\n  return (\n    <span>{attribute.name}</span>\n  )\n}\n\nexport default Attribute;\n","import React from 'react'\nimport Attribute from './Attribute'\n\nconst Character = (props) => {\n  const { characterAlignment, characterRace, characterClass } = props;\n\n  return (\n    <div class='col text-center'>\n      You should build a <Attribute attribute={characterAlignment} />  <Attribute attribute={characterRace} /> <Attribute attribute={characterClass} />!\n    </div>\n  )\n}\n\nexport default Character;\n","import React from 'react'\n\nconst AbilityScore = (props) => {\n  const { score } = props;\n\n  return(\n    <div class=\"col-4 col-md d-flex justify-content-center gy-3\">\n      <div class=\"roll-result text-center\">\n        { score }\n      </div>\n    </div>\n  )\n}\n\nexport default AbilityScore;\n","import React from 'react'\nimport AbilityScore from './AbilityScore'\n\nconst RollResult = (props) => {\n  const { rollResult } = props;\n\n  return (\n    <div class=\"col d-flex justify-content-center\">\n      <div class=\"row\">\n        <AbilityScore score={rollResult[0]} />\n        <AbilityScore score={rollResult[1]} />\n        <AbilityScore score={rollResult[2]} />\n        <AbilityScore score={rollResult[3]} />\n        <AbilityScore score={rollResult[4]} />\n        <AbilityScore score={rollResult[5]} />\n      </div>\n    </div>\n  )\n}\n\nexport default RollResult;\n","const STANDARD_ARRAY = [\n  8,\n  10,\n  12,\n  13,\n  14,\n  15\n]\n\nconst rollD6 = () => {\n  return Math.ceil(Math.random() * 6);\n}\n\nconst rollManual = () => {\n  let manualRolls = []\n  // 6 iterations, once for each ability score\n  for(let i = 0; i < 6; i++) {\n    // generate 4 rolls and sort in numerical order\n    let rolls = [rollD6(), rollD6(), rollD6(), rollD6()].sort()\n    // remove the first element (drop the lowest)\n    rolls.shift()\n    // add together\n    const score = rolls.reduce((a, b) => a + b, 0)\n    manualRolls.push(score)\n  }\n\n  return manualRolls.sort((a, b) => (a - b))\n}\n\nexport const rollAbilityScores = (type) => {\n  if (type ==='Standard Array') {\n    return(STANDARD_ARRAY)\n  } else {\n    return(rollManual())\n  }\n}\n","import React, { useState } from 'react'\nimport RollResult from './RollResult'\nimport { rollAbilityScores } from './helpers/RollHelper'\n\nconst Roller = (props) => {\n  const { visible } = props\n  const [rollMethod, setRollMethod] = useState(null)\n  const [rollResult, setRollResult] = useState(null)\n\n  const handleUpdate = (event) => {\n    setRollMethod(event.target.value)\n    setRollResult(rollAbilityScores(event.target.value))\n  }\n\n  const displayRollType = () => {\n    if (rollMethod) {\n      return (\n        <div>\n          <div class=\"row d-flex justify-content-center\">\n            <div class=\"col d-flex justify-content-center text-center\">\n              <h2> Rolling with { rollMethod }:</h2>\n            </div>\n          </div>\n          <div class=\"row d-flex justify-content-center\">\n            <RollResult rollResult={ rollResult } />\n          </div>\n        </div>\n      )\n    } else {\n      return null;\n    }\n  }\n\n  if(visible === true) {\n    return (\n      <div class=\"row justify-content-center gy-3\">\n        <div class=\"col-md-3 justify-content-center d-flex\" value={rollMethod} onChange={(event) => handleUpdate(event)}>\n          <input type=\"radio\" value=\"Standard Array\" id=\"standard\" name=\"rollmethod\" class=\"btn-check\" />\n          <label class=\"btn transition-button\" for=\"standard\">Standard Array</label>\n        </div>\n        <div class=\"col-md-3 justify-content-center d-flex\" value={rollMethod} onChange={(event) => handleUpdate(event)}>\n          <input type=\"radio\" value=\"Manual\" id=\"manual\" name=\"rollmethod\" class=\"btn-check\" />\n          <label class=\"btn transition-button\" for=\"manual\">Manual</label>\n        </div>\n        { displayRollType() }\n      </div>\n    )\n  } else {\n    return null;\n  }\n}\n\nexport default Roller;\n","import React, { useState } from 'react'\nimport Character from './Character'\nimport Roller from './Roller'\n\nconst CharacterRandomizer = (props) => {\n  const sample = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  const shuffleCharacter = () => {\n    setCharacterClass(sample(classes));\n    setCharacterRace(sample(races));\n    setCharacterAlignment(sample(alignments));\n  }\n\n  const lockIn = () => {\n    setLockedIn(true); \n  }\n\n  const { alignments, races, classes } = props.srdData;\n  const [characterAlignment, setCharacterAlignment] = useState(sample(alignments))\n  const [characterRace, setCharacterRace] = useState(sample(races))\n  const [characterClass, setCharacterClass] = useState(sample(classes))\n  const [lockedIn, setLockedIn] = useState(false)\n\n  const renderButtons = () => {\n    if (lockedIn === false) {\n      return (\n        <div class=\"row justify-content-center gy-3\">\n          <div class=\"col-md-3 d-flex justify-content-center\"> \n            <button class=\"btn transition-button\" onClick={() => shuffleCharacter() }>\n              { \"I'm not feeling this one\" }\n            </button>\n          </div>\n          <div class=\"col-md-3 d-flex justify-content-center\"> \n            <button class=\"btn transition-button\" onClick={() => lockIn() }>\n              { \"Ok, sure.\" }\n            </button>\n          </div>\n        </div>\n      )\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <div class=\"container-fluid\">\n      <div class='row character m-4'>\n        <Character \n          characterAlignment={characterAlignment}\n          characterRace={characterRace} \n          characterClass={characterClass}\n        />\n      </div>\n      { renderButtons() }\n      <div class='row'>\n        <Roller visible={lockedIn} />\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterRandomizer;\n","import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport CharacterRandomizer from './CharacterRandomizer'\nimport './../styles/App.css'\n\nconst App = () => {\n  const SRD_QUERY = gql`\n    {\n      races {\n        name\n      }\n      classes {\n        name\n      }\n      alignments {\n        name\n      }\n    }\n  `;\n\n  const { data } = useQuery(SRD_QUERY);\n\n  if (data) {\n    return (\n      <CharacterRandomizer srdData={data}/>\n    );\n  } else {\n    return (\n      <div class=\"container-fluid text-center\">\n        <h1>Crunchatizing</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client'\n\nconst httpLink = createHttpLink({\n  uri: 'https://www.dnd5eapi.co/graphql'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}