{"version":3,"sources":["components/Attribute.js","components/Character.js","components/Wizard.js","components/QueryInterface.js","components/App.js","reportWebVitals.js","index.js"],"names":["Attribute","props","attribute","name","Character","characterAlignment","characterRace","characterClass","class","Wizard","sample","array","Math","floor","random","length","srdData","alignments","races","classes","useState","setCharacterAlignment","setCharacterRace","setCharacterClass","onClick","QueryInterface","SRD_QUERY","gql","data","useQuery","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAUeA,EARG,SAACC,GACjB,IAAQC,EAAcD,EAAdC,UAER,OACE,+BAAOA,EAAUC,QCONC,EAVG,SAACH,GACjB,IAAQI,EAAsDJ,EAAtDI,mBAAoBC,EAAkCL,EAAlCK,cAAeC,EAAmBN,EAAnBM,eAE3C,OACE,sBAAKC,MAAM,kBAAX,gCACqB,cAAC,EAAD,CAAWN,UAAWG,IAD3C,KACmE,cAAC,EAAD,CAAWH,UAAWI,IADzF,IAC2G,cAAC,EAAD,CAAWJ,UAAWK,IADjI,QCgCWE,EApCA,SAACR,GACd,IAAMS,EAAS,SAACC,GACd,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAShD,EAAuCd,EAAMe,QAArCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,QAC3B,EAAoDC,mBAASV,EAAOO,IAApE,mBAAOZ,EAAP,KAA2BgB,EAA3B,KACA,EAA0CD,mBAASV,EAAOQ,IAA1D,mBAAOZ,EAAP,KAAsBgB,EAAtB,KACA,EAA4CF,mBAASV,EAAOS,IAA5D,mBAAOZ,EAAP,KAAuBgB,EAAvB,KAEA,OACE,sBAAKf,MAAM,kBAAX,UACE,qBAAKA,MAAM,oBAAX,SACE,cAAC,EAAD,CACEH,mBAAoBA,EACpBC,cAAeA,EACfC,eAAgBA,MAGpB,qBAAKC,MAAM,kCAAX,SACE,qBAAKA,MAAM,yCAAX,SACE,wBAAQA,MAAM,wBAAwBgB,QAAS,kBArBrDD,EAAkBb,EAAOS,IACzBG,EAAiBZ,EAAOQ,SACxBG,EAAsBX,EAAOO,KAmBvB,SACI,qC,QCHCQ,EAxBQ,WACrB,IAAMC,EAAYC,cAAH,qKAcPC,EAASC,mBAASH,GAAlBE,KAER,OAAIA,EACM,cAAC,EAAD,CAAQZ,QAASY,IAEjB,iDCVGE,G,MAVH,WACV,OACE,qBAAKC,UAAU,OAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,UCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCORQ,EAAWC,yBAAe,CAC9BC,IAAK,oCAGDC,EAAS,IAAIC,eAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,IAAMO,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.8cdc4c64.chunk.js","sourcesContent":["import React from 'react'\n\nconst Attribute = (props) => {\n  const { attribute } = props;\n\n  return (\n    <span>{attribute.name}</span>\n  )\n}\n\nexport default Attribute;\n","import React from 'react'\nimport Attribute from './Attribute'\n\nconst Character = (props) => {\n  const { characterAlignment, characterRace, characterClass } = props;\n\n  return (\n    <div class='col text-center'>\n      You should build a <Attribute attribute={characterAlignment} />  <Attribute attribute={characterRace} /> <Attribute attribute={characterClass} />!\n    </div>\n  )\n}\n\nexport default Character;\n","import React, { useState } from 'react'\nimport Character from './Character'\n\nconst Wizard = (props) => {\n  const sample = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  const shuffleCharacter = () => {\n    setCharacterClass(sample(classes));\n    setCharacterRace(sample(races));\n    setCharacterAlignment(sample(alignments));\n  }\n\n  const { alignments, races, classes } = props.srdData;\n  const [characterAlignment, setCharacterAlignment] = useState(sample(alignments))\n  const [characterRace, setCharacterRace] = useState(sample(races))\n  const [characterClass, setCharacterClass] = useState(sample(classes))\n\n  return (\n    <div class=\"container-fluid\">\n      <div class='row character m-4'>\n        <Character \n          characterAlignment={characterAlignment}\n          characterRace={characterRace} \n          characterClass={characterClass}\n        />\n      </div>\n      <div class=\"row justify-content-center gy-3\">\n        <div class=\"col-md-3 d-flex justify-content-center\"> \n          <button class=\"btn transition-button\" onClick={() => shuffleCharacter() }>\n            { \"I'm not feeling this one\" }\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Wizard;\n","import React from 'react'\nimport Wizard from './Wizard'\nimport { useQuery, gql } from '@apollo/client';\n\nconst QueryInterface = () => {\n  const SRD_QUERY = gql`\n    {\n      races {\n        name\n      }\n      classes {\n        name\n      }\n      alignments {\n        name\n      }\n    }\n  `;\n\n  const { data } = useQuery(SRD_QUERY);\n\n  if (data) {\n    return (<Wizard srdData={data}/>);\n  } else {\n    return (<p> Crunchatizing </p>);\n  }\n}\n\nexport default QueryInterface;\n","import React from 'react';\nimport QueryInterface from './QueryInterface'\nimport './../styles/App.css'\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <div className='content'>\n        <QueryInterface />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client'\n\nconst httpLink = createHttpLink({\n  uri: 'https://www.dnd5eapi.co/graphql'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}